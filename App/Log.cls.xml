<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="App.Log">
<Super>%Persistent</Super>
<TimeCreated>63685,63064.148177</TimeCreated>

<Parameter name="Null">
<Description>
Replacement for missing values</Description>
<Default>Null</Default>
</Parameter>

<Property name="EventType">
<Description>
Type of event</Description>
<Type>%String</Type>
<InitialExpression>"INFO"</InitialExpression>
<Parameter name="MAXLEN" value="10"/>
<Parameter name="VALUELIST" value=",NONE,FATAL,ERROR,WARN,INFO,STAT,DEBUG,RAW"/>
</Property>

<Property name="ClassName">
<Description>
Name of class, where event happened</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="MethodName">
<Description>
Name of method, where event happened</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="128"/>
</Property>

<Property name="Source">
<Description>
Line of int code</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="SourceCLS">
<Description>
Line of cls code</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="UserName">
<Description>
Cache user</Description>
<Type>%String</Type>
<InitialExpression>$username</InitialExpression>
<Parameter name="MAXLEN" value="128"/>
</Property>

<Property name="Arguments">
<Description>
Arguments' values passed to method</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TimeStamp">
<Description>
Date and time</Description>
<Type>%TimeStamp</Type>
<InitialExpression>$zdt($h, 3, 1)</InitialExpression>
</Property>

<Property name="Message">
<Description>
User message</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ClientIPAddress">
<Description>
User IP address</Description>
<Type>%String</Type>
<InitialExpression>..GetClientAddress()</InitialExpression>
<Parameter name="MAXLEN" value="32"/>
</Property>

<Index name="idxEventType">
<Type>bitmap</Type>
<Properties>EventType</Properties>
</Index>

<Index name="idxUserName">
<Type>bitmap</Type>
<Properties>UserName</Properties>
</Index>

<Index name="idxClassName">
<Type>bitmap</Type>
<Properties>ClassName</Properties>
</Index>

<Index name="idxTimeStamp">
<Type>bitslice</Type>
<Properties>TimeStamp</Properties>
</Index>

<Index name="idxClientIPAddress">
<Properties>ClientIPAddress</Properties>
</Index>

<Method name="GetClientAddress">
<Description>
Determine user IP address</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// %CSP.Session source is preferable
	#dim %request As %CSP.Request
	If ($d(%request)) {
		Return %request.CgiEnvs("REMOTE_ADDR")
	}
	Return $system.Process.ClientIPAddress()
]]></Implementation>
</Method>

<Method name="AddRecord">
<Description>
Add new log event
Use via $$$LogEventTYPE().</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String="",MethodName:%String="",Source:%String="",EventType:%String="",Arguments:%String="",Message:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set record = ..%New()
	Set record.Arguments = Arguments
	Set record.ClassName = ClassName
	Set record.EventType = EventType
	Set record.Message = Message
	Set record.MethodName = MethodName
	Set record.Source = Source
	do ..GetClassSourceLine($Piece(Source, " ", 1, *-1), .SourceCLS)
	Set record.SourceCLS = SourceCLS
	Do record.%Save()
]]></Implementation>
</Method>

<Method name="GetMethodArguments">
<Description>
Entry point to get method arguments string </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,MethodName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set list = ..GetMethodArgumentsList(ClassName, MethodName)
	Set string = ..ArgumentsListToString(list)
	Return string
]]></Implementation>
</Method>

<Method name="GetMethodArgumentsList">
<Description>
Get a list of method arguments</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,MethodName:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	Set result = ""
	Set def = ##class(%Dictionary.CompiledMethod).%OpenId(ClassName _ "||" _ MethodName)
	If ($IsObject(def)) {
		Set result = def.FormalSpecParsed
	}
	Return result
]]></Implementation>
</Method>

<Method name="ArgumentsListToString">
<Description>
Convert list of method arguments to string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>List:%List</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set result = ""
	For i=1:1:$ll(List) {
		Set result = result _ $$$quote($s(i>1=0:"",1:"; ") _ $lg($lg(List,i))_"=") 
		_ ..GetArgumentValue($lg($lg(List,i)),$lg($lg(List,i),2))
		_$S(i=$ll(List)=0:"",1:$$$quote(";"))
	}
	Return result
]]></Implementation>
</Method>

<Method name="GetArgumentValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String,ClassName:%Dictionary.CacheClassname</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $ClassMethod(ClassName, "%Extends", "%RegisteredObject") {
		// it's an object
		Return "_##class(App.Log).SerializeObject("_Name _ ")_"
	} Else {
		// it's a datatype
		Return "_$g(" _ Name _ ","_$$$quote(..#Null)_")_"
	}
]]></Implementation>
</Method>

<Method name="SerializeObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>Object</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Return:'$IsObject(Object) Object
	Return ..WriteJSONFromObject(Object)
]]></Implementation>
</Method>

<Method name="WriteJSONFromObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>Object</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	New OldIORedirected, OldMnemonic, OldIO, Str
	Set OldIORedirected = ##class(%Device).ReDirectIO()
	Set OldMnemonic = ##class(%Device).GetMnemonicRoutine()
	Set OldIO = $io
	Try {
		Set Str=""

		//Redirect IO to the current routine - makes use of the labels defined below
		Use $io::("^"_$ZNAME)

		//Enable redirection
		Do ##class(%Device).ReDirectIO(1)

		Do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(Object)
	} Catch Ex {
		Set Str = ""
	}

	//Return to original redirection/mnemonic routine settings
	If (OldMnemonic '= "") {
		Use OldIO::("^"_OldMnemonic)
	} Else {
		Use OldIO
	}
	Do ##class(%Device).ReDirectIO(OldIORedirected)

	Quit Str
 
    // Labels that allow for IO redirection
    // Read Character - we don't care about reading
rchr(c)      Quit
    // Read a string - we don't care about reading
rstr(sz,to)  Quit
    // Write a character - call the output label
wchr(s)      Do output($char(s))  Quit
    // Write a form feed - call the output label
wff()        Do output($char(12))  Quit
    // Write a newline - call the output label
wnl()        Do output($char(13,10))  Quit
    // Write a string - call the output label
wstr(s)      Do output(s)  Quit
    // Write a tab - call the output label
wtab(s)      Do output($char(9))  Quit
    // Output label - this is where you would handle what you actually want to do.
    // in our case, we want to write to Str
output(s)    Set Str = Str_s Quit
]]></Implementation>
</Method>

<Method name="LoadContext">
<ClassMethod>1</ClassMethod>
<FormalSpec>zzId</FormalSpec>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New zzObj, zzArguments, zzArgument, zzi, zzList
	Return:'..%ExistsId(zzId) $$$OK
	Set zzObj = ..%OpenId(zzId)
	Set zzArguments = zzObj.Arguments
	Set zzList = ..GetMethodArgumentsList(zzObj.ClassName,zzObj.MethodName)
	For zzi=1:1:$Length(zzArguments, ";")-1 {
		Set zzArgument = $Piece(zzArguments,";",zzi)
		Set @$lg($lg(zzList,zzi)) = ..DeserializeObject($Piece(zzArgument,"=",2), $lg($lg(zzList,zzi),2))
	}
]]></Implementation>
</Method>

<Method name="DeserializeObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>String,ClassName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If $ClassMethod(ClassName, "%Extends", "%RegisteredObject") {
		// it's an object
		Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(String,,.obj)
		Return:$$$ISOK(st) obj
	}
	Return String
]]></Implementation>
</Method>

<Method name="GetClassSourceLine">
<ClassMethod>1</ClassMethod>
<FormalSpec>IntLocation:%String,*ClsLocation:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set Status = $$$OK
    Set ClsLocation = ""
    Try {
        Set MethodAndLine = $Piece(IntLocation,"^",1)
        Set IntName = $Piece(IntLocation,"^",2)
        Set Tag = $Piece(MethodAndLine,"+")
        Set RelativeOffset = $Piece(MethodAndLine,"+",2)
        
        // Get routine text to find the absolute offset of tTag
        Set TagOffset = 0
        Set EndPos = 0
        Set TextLines = 0
        For {
            Set Line = $Text(@("+"_$Increment(TextLines)_ "^" _ IntName))
            Quit:Line=""
            
            // Example:
            // zRun() public {
            // This relies on an assumption that methods will be sorted alphabetically and won't contain labels.
            If $Extract(Line, 1, $Length(Tag)) = Tag {
                Set TagOffset = TextLines //tTextLines is the counter.
                Set EndPos = $Length(Line)
                Quit
            }
        }
        
        // The absolute offset of the line in the .int file is the tag's offset plus the offset within it.
        Set Offset = TagOffset + RelativeOffset
        Set Status = ##class(%Studio.Debugger).SourceLine(IntName, Offset, 0, Offset, EndPos,, .Map)
        If $$$ISERR(Status) {
            Quit
        }
        If $Data(Map("CLS", 1)) {
            Set $ListBuild(Class, Method, Line, EndPos, Namespace) = Map("CLS", 1)
            Set Class = $$$comMemberKeyGet(Class, $$$cCLASSmethod, Method, $$$cMETHorigin)
            Set ClsLocation = Class _ ":" _ Method _ "+" _ Line
        }
    } Catch Ex {
        Set Status = Ex.AsStatus()
    }
    Quit Status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^App.LogD</DataLocation>
<DefaultData>LogDefaultData</DefaultData>
<IdLocation>^App.LogD</IdLocation>
<IndexLocation>^App.LogI</IndexLocation>
<StreamLocation>^App.LogS</StreamLocation>
<Data name="LogDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventType</Value>
</Value>
<Value name="3">
<Value>ClassName</Value>
</Value>
<Value name="4">
<Value>UserName</Value>
</Value>
<Value name="5">
<Value>MethodName</Value>
</Value>
<Value name="6">
<Value>Arguments</Value>
</Value>
<Value name="7">
<Value>TimeStamp</Value>
</Value>
<Value name="8">
<Value>Message</Value>
</Value>
<Value name="9">
<Value>ClientIPAddress</Value>
</Value>
<Value name="10">
<Value>Source</Value>
</Value>
<Value name="11">
<Value>SourceCLS</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
